package com.plexobject.testplayer;

import com.plexobject.testplayer.ApplicationContext;
import com.plexobject.testplayer.util.TypeHelper;
import java.util.regex.*;
import junit.framework.TestCase;

/**
 * Generated by JUnitDoclet, a tool provided by ObjectFab GmbH under LGPL. Please see www.junitdoclet.org, www.gnu.org and www.objectfab.de for informations about the tool, the licence and the authors.
 */


public class ApplicationContextTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.plexobject.testplayer.ApplicationContext applicationcontext = null;
  // JUnitDoclet end class
  
  public ApplicationContextTest(String name) {
    // JUnitDoclet begin method ApplicationContextTest
    super(name);
    // JUnitDoclet end method ApplicationContextTest
  }
  
  public com.plexobject.testplayer.ApplicationContext createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new com.plexobject.testplayer.ApplicationContext();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    applicationcontext = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    applicationcontext = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testIsPermittedPackage() throws Exception {
    // JUnitDoclet begin method isPermittedPackage
    /*
     * Though this should be divided into separate test methods, I am
     * being lazy and I know next time if I run junitdoclet it's going
     to overwrite my methods.
    */ 
    TypeHelper.setField(applicationcontext, "allowedPackages", null);
    TypeHelper.setField(applicationcontext, "disAllowedPackages", null);
    assertTrue("package filter is turned off", applicationcontext.isPermittedPackage(null));
    //
    TypeHelper.setField(applicationcontext, "allowedPackages", Pattern.compile("com.plexobject.mini.*"));
    TypeHelper.setField(applicationcontext, "disAllowedPackages", Pattern.compile("com.plexobject.mini.*"));
    assertTrue("package filter is turned off", applicationcontext.isPermittedPackage(null));
    // JUnitDoclet end method isPermittedPackage
  }
  
  public void testUseMockForPackage() throws Exception {
    // JUnitDoclet begin method useMockForPackage
    // JUnitDoclet end method useMockForPackage
  }
  
  public void testGetBaseDir() throws Exception {
    // JUnitDoclet begin method getBaseDir
    // JUnitDoclet end method getBaseDir
  }
  
  public void testNewFile() throws Exception {
    // JUnitDoclet begin method newFile
    // JUnitDoclet end method newFile
  }
  
  public void testNextMethodEntryId() throws Exception {
    // JUnitDoclet begin method nextMethodEntryId
    // JUnitDoclet end method nextMethodEntryId
  }
  
  public void testNewThread() throws Exception {
    // JUnitDoclet begin method newThread
    // JUnitDoclet end method newThread
  }
  
  public void testIsNotifyAsynchronously() throws Exception {
    // JUnitDoclet begin method isNotifyAsynchronously
    // JUnitDoclet end method isNotifyAsynchronously
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(ApplicationContextTest.class);
    // JUnitDoclet end method testcase.main
  }
}
