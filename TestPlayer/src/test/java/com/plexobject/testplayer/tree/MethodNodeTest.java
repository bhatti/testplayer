package com.plexobject.testplayer.tree;

import com.plexobject.testplayer.MethodEntry;
import com.plexobject.testplayer.tree.MethodNode;
import junit.framework.TestCase;

/**
 * Generated by JUnitDoclet, a tool provided by ObjectFab GmbH under LGPL. Please see www.junitdoclet.org, www.gnu.org and www.objectfab.de for informations about the tool, the licence and the authors.
 */


public class MethodNodeTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.plexobject.testplayer.tree.MethodNode methodnode = null;
  // JUnitDoclet end class
  
  public MethodNodeTest(String name) {
    // JUnitDoclet begin method MethodNodeTest
    super(name);
    // JUnitDoclet end method MethodNodeTest
  }
  
  public com.plexobject.testplayer.tree.MethodNode createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new com.plexobject.testplayer.tree.MethodNode();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    methodnode = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    methodnode = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testToString() throws Exception {
    // JUnitDoclet begin method toString
    // JUnitDoclet end method toString
  }
  
  public void testHashCode() throws Exception {
    // JUnitDoclet begin method hashCode
    // JUnitDoclet end method hashCode
  }
  
  public void testEquals() throws Exception {
    // JUnitDoclet begin method equals
    // JUnitDoclet end method equals
  }
  
  public void testSetGetParent() throws Exception {
    // JUnitDoclet begin method setParent getParent
    MethodNode[] tests = {new MethodNode(), null};
    
    for (int i = 0; i < tests.length; i++) {
      methodnode.setParent(tests[i]);
      assertEquals(tests[i], methodnode.getParent());
    }
    // JUnitDoclet end method setParent getParent
  }
  
  public void testGetId() throws Exception {
    // JUnitDoclet begin method getId
    // JUnitDoclet end method getId
  }
  
  public void testSetGetMethodEntry() throws Exception {
    // JUnitDoclet begin method setMethodEntry getMethodEntry
    MethodEntry[] tests = {new MethodEntry(), null};
    
    for (int i = 0; i < tests.length; i++) {
      methodnode.setMethodEntry(tests[i]);
      assertEquals(tests[i], methodnode.getMethodEntry());
    }
    // JUnitDoclet end method setMethodEntry getMethodEntry
  }
  
  public void testGetChildren() throws Exception {
    // JUnitDoclet begin method getChildren
    // JUnitDoclet end method getChildren
  }
  
  public void testGetChildrenRecords() throws Exception {
    // JUnitDoclet begin method getChildrenRecords
    // JUnitDoclet end method getChildrenRecords
  }
  
  public void testVisit() throws Exception {
    // JUnitDoclet begin method visit
    // JUnitDoclet end method visit
  }
  
  public void testIterator() throws Exception {
    // JUnitDoclet begin method iterator
    // JUnitDoclet end method iterator
  }
  
  public void testSettChildren() throws Exception {
    // JUnitDoclet begin method settChildren
    // JUnitDoclet end method settChildren
  }
  
  public void testAddChild() throws Exception {
    // JUnitDoclet begin method addChild
    // JUnitDoclet end method addChild
  }
  
  public void testGetAttribute() throws Exception {
    // JUnitDoclet begin method getAttribute
    // JUnitDoclet end method getAttribute
  }
  
  public void testSetAttribute() throws Exception {
    // JUnitDoclet begin method setAttribute
    // JUnitDoclet end method setAttribute
  }
  
  public void testSize() throws Exception {
    // JUnitDoclet begin method size
    // JUnitDoclet end method size
  }
  
  public void testFind() throws Exception {
    // JUnitDoclet begin method find
    // JUnitDoclet end method find
  }
  
  public void testAccept() throws Exception {
    // JUnitDoclet begin method accept
    // JUnitDoclet end method accept
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(MethodNodeTest.class);
    // JUnitDoclet end method testcase.main
  }
}
