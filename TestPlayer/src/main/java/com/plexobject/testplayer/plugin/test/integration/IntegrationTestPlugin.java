/* ===========================================================================
 * $RCS$
 * Version: $Id: IntegrationTestPlugin.java,v 2.14 2006/08/26 20:58:52 shahzad Exp $
 * ===========================================================================
 *
 * TestPlayer - an automated test harness builder
 *
 * Copyright (c) 2005-2006 Shahzad Bhatti (bhatti@plexobject.com)
 *
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * The author may be contacted at bhatti@plexobject.com 
 * See http://testplayer.dev.java.net/ for more details.
 *
 */

package com.plexobject.testplayer.plugin.test.integration;
import com.plexobject.testplayer.plugin.*;
import com.plexobject.testplayer.plugin.test.*;
import com.plexobject.testplayer.*;
import com.plexobject.testplayer.util.*;
import com.plexobject.testplayer.events.*;
import com.plexobject.testplayer.visitor.*;
import java.io.*;
import java.util.*;
import java.text.*;
import java.beans.*;
import java.lang.reflect.*;
import org.apache.log4j.*;

/**
 * This class creates integration tests using junit
 *
 * @see http://testng.org/doc/documentation-main.html
 *
 * @author shahzad bhatti
 *
 * modification history
 * date         who             what
 * 10/3/05      SB              created.
 */
public class IntegrationTestPlugin extends BaseTestPlugin {
  public static final String TAG_DATA_DIR = "testplayer.integration.data.dir";
  public static final String TAG_FILE_PREFIX = "testplayer.integration.file.prefix";
  public static final String TAG_FILE_SUFFIX = "testplayer.integration.file.suffix";
  public static final String TAG_FILE_EXT = "testplayer.integration.file.ext";
  public static final String TAG_DEPTH = "testplayer.integration.depth";
  /**
   * IntegrationTestPlugin - creates integration tests
   * @param context - application context
   */
  public IntegrationTestPlugin(ApplicationContext context) {
    super(
        context,
        context.getConfig().getProperty(TAG_DATA_DIR, "java/integration"),
        context.getConfig().getProperty(TAG_FILE_PREFIX, ""),
        context.getConfig().getProperty(TAG_FILE_SUFFIX, "ITest"),
        context.getConfig().getProperty(TAG_FILE_EXT, ".java"),
        true,
        context.getConfig().getInteger(TAG_DEPTH)
        );
  }

  /**
   * creates suites of tests at the end of top level call.
   */
  protected void cleanup() throws Exception {
    writeSuites();
  }



  /**
   * initFile initialize output file
   * @param call - method call information
   * @param file - name of file
   */
  protected void initFile(
        MethodEntry call, 
        File file, 
        Object writer, 
        String pkg
        ) throws IOException {
    PrintWriter out = (PrintWriter) writer;
    if (pkg != null) out.println("package " + pkg + ";");
    String fileName = file.getName();
    String fileNameWithoutExt = fileName.substring(0, fileName.indexOf('.'));
    out.println("import junit.framework.*;");
    out.println("import java.beans.*;");
    out.println("import java.util.*;");
    out.println("import java.io.*;");
    out.println("import com.plexobject.testplayer.marshal.*;");
    out.println("import com.plexobject.testplayer.util.*;");
    out.println();
    out.println();
    out.println("/**");
    out.println(" * defines integration test for " + fileNameWithoutExt);
    out.println(" * @author - autogenerated by testplayer");

    // TestNG Annotations for Test Class
    if (context.getJavaVersion() >= 1.5) {
      out.println(" */"); 
      if (isTestFrameworkTestNG()) {
        out.println(" @org.testng.annotations.Test(" + Configuration.LF + "\t\tgroups = { \"integration-test\" }, " + Configuration.LF + "\t\talwaysRun = true, " + Configuration.LF + "\t\tenabled = true, " + Configuration.LF + "\t\tinvocationCount = 1, " + Configuration.LF + "\t\tsuccessPercentage = 100, " + Configuration.LF + "\t\ttimeOut = 10000, " + Configuration.LF + "\t\tthreadPoolSize = 1)");
      }
    } else {
      if (isTestFrameworkTestNG()) {
        out.println(" * @testng.test groups = \"integration-test\", alwaysRun = \"true\",enabled = \"true\", invocationCount = \"1\", successPercentage = \"100\", timeOut = \"10000\", threadPoolSize = \"1\"");
      }
      out.println(" */"); 
    }



    out.println("public class " + fileNameWithoutExt + " extends TestCase {");
    out.println("  IMarshaller marshaller = new " + context.getDefaultMarshaller().getClass().getName() + "();");
    if (isTestFrameworkJUnit4()) {
      out.println("  public static Test suite() {");
      out.println("    return new JUnit4TestAdapter(" + pkg + "." + fileNameWithoutExt + ".class);");
    } else {
      out.println("  public static TestSuite suite() {");
      out.println("    TestSuite suite = new TestSuite(\"" + pkg + "." + fileNameWithoutExt + "\");");
      out.println("    suite.addTestSuite(" + pkg + "." + fileNameWithoutExt + ".class);");
      out.println("    return suite;");
    }
    out.println("  }");


    // TestNG Annotations for Setup Method
    out.println("  /**");
    if (context.getJavaVersion() >= 1.5) {
      if (isTestFrameworkJUnit4()) {
        out.println("   @org.junit.Before");
      }
      if (isTestFrameworkTestNG()) {
        out.println("   */");
        out.println("   @org.testng.annotations.Configuration(" + Configuration.LF + "\t\tbeforeTest = true," + Configuration.LF + "\t\tbeforeTestMethod = true," + Configuration.LF + "\t\tbeforeTestClass = true)");
        //out.println("   @org.testng.annotations.Configuration(beforeSuite = true)");
      }
    } else {
      if (isTestFrameworkJUnit4()) {
        out.println("   * @org.junit.Before");
      }
      if (isTestFrameworkTestNG()) {
        out.println("   * @testng.context.getConfiguration beforeTest = \"true\",beforeTestMethod = \"true\",beforeTestClass = \"true\"");
        //out.println("   * @testng.configuration beforeSuite = \"true\"");
      }
      out.println("   */");
    }

    out.println("  public void setUp() {");
    out.println("  }");

    out.println("  public void testVaultFor" + fileNameWithoutExt + "() {");
    out.println("  }");
    out.println();

    out.println("  /**");
    if (context.getJavaVersion() >= 1.5) {
      out.println("   */");
      if (isTestFrameworkJUnit4()) {
        out.println("   @org.junit.After");
      }
      if (isTestFrameworkTestNG()) {
        out.println("   @org.testng.annotations.Configuration(" + Configuration.LF + "\t\tafterTest = true," + Configuration.LF + "\t\tafterTestMethod = true, " + Configuration.LF + "\t\tafterTestClass = true, " + Configuration.LF + "\t\tafterSuite = true)");
        //out.println("   @Configuration(afterSuite = true)");
      }
    } else {
      if (isTestFrameworkJUnit4()) {
        out.println("   * @org.junit.After");
      }
      if (isTestFrameworkTestNG()) {
        out.println("   * @testng.context.getConfiguration afterTest = \"true\", afterTestClass = \"true\", afterTestMethod = \"true\"");
        //out.println("   * @testng.configuration afterSuite = \"true\"");
      }
      out.println("   */");
    }
    out.println("  public void tearDown() {");
    out.println("  }");
    out.println();


    out.println("  public static void main(String[] args) {");
    out.println("    junit.textui.TestRunner.run(suite());");
    out.println("  }");
  }





  /**
   * after - receives notification after a method is invoked
   * @param context - application context
   * @param event - method call
   * @param writer - output
   */
  protected void after(
        ApplicationContext context, 
        MethodEvent event, 
        Object writer)
        throws Exception {
    // skipping testing constructors 
    if (context.isSkipConstructorTest() && event.call.isConstructor()) return;
    //

    if (!event.call.isPublic()) return;	// ??? 8/25/06
    String tmethod = event.call.getMethodNameWithInvocationCount();
    if (logger.isEnabledFor(Level.DEBUG)) {
       logger.debug("Writing integration test for " + tmethod);
    }
    PrintWriter out = (PrintWriter) writer;
    
    //////////////////////////////////////////////////////////////////////
    //
    String fixtureName = createFixture(event.call, out);

    out.println(context.tab() + "/**");
    out.println(context.tab() + " *");
    out.println("   * " + event.call.toLongString());

    if (context.getJavaVersion() >= 1.5) {
	StackTraceElement[] ste = Thread.currentThread().getStackTrace();
	if (ste.length > 15) {
	  StackTraceElement last = ste[15];
          out.println("   * " + last.getFileName() + " " + last.getLineNumber());
        }
    }
    // TestNG Annotations for Test Method
    if (context.getJavaVersion() >= 1.5) {
        out.println("   */"); 
        if (isTestFrameworkJUnit4()) {
          out.println("   @org.junit.Test"); //(expected=MyException.class)
        }
        if (isTestFrameworkTestNG()) {
          out.println("   @org.testng.annotations.Test(" + Configuration.LF + "\t\tgroups = { \"integration-test." + event.call.getCalleeNameWithoutPackage() + "\" })");
        }
    } else {
        if (isTestFrameworkJUnit4()) {
          out.println("   * @org.junit.Test");
        }
        if (isTestFrameworkTestNG()) {
          out.println("   * @testng.test groups = \"integration-test." + event.call.getCalleeNameWithoutPackage() + "\" })"); //dependsOnMethods = "m1"
        }
        out.println("   */"); 
    }

    //@org.testng.annotations.ExpectedExceptions(ElementNotFoundException.class)
    out.println("  public void test" + tmethod + "() throws Exception {");
    writeTestBodyInit(event.call, fixtureName, out);
    writeTestBodyInvoke(event.call, out, null, null);
    out.println("  }"); 
    out.println();
  }

}
