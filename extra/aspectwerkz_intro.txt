import org.codehaus.aspectwerkz.AspectContext;

import java.io.Serializable;

/**
 * @Aspect perClass
 */
public class IntroductionAspect extends AbstractIntroductionAspect {

    /**
     * @Introduce within(examples.introduction.Target)
     */
    public Serializable serializable;

    /**
     * @Mixin(pointcut="within(@Annotation *..*)", deploymentModel="perInstance"
)
     */
    public static class MyConcreteImpl extends MyImpl {

        /**
         * The instance we are introduced to since we are perInstance
         */
        private final Object m_target;

        /**
         * @param target
         */
        public MyConcreteImpl(final Object target) {
            m_target = target;
            System.out.println("--Accessing mixin target instance from the mixin
 <init>...");
            System.out.println("-- I am introduced to " + target);
            sayHello2();
            System.out.println("--..<init> done");
        }

        public String sayHello2() {
            return "Hello World! Hello World!";
        }
    }
}


/**
 * @Annotation
 * @author <a href="mailto:jboner@codehaus.org">Jonas Bon~Nr </a>
 */
public class Target {
    public static void main(String[] args) {
        Target target = new Target();
        System.out.println("The mixin says: " + ((Mixin) target).sayHello1());
        System.out.println("The mixin says: " + ((Mixin) target).sayHello2());
        Target target2 = new Target();
        System.out.println("The mixin says: " + ((Mixin) target2).sayHello1());
        System.out.println("The mixin says: " + ((Mixin) target2).sayHello2());
    }
}


<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz2.dtd">
<aspectwerkz>
    <system id="args">
        <aspect class="examples.logging.ArgAspect"/>
    </system>
</aspectwerkz>/**************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                 *
 * http://aspectwerkz.codehaus.org                                                    *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the LGPL license      *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/
package examples.logging;

import org.codehaus.aspectwerkz.annotation.Annotation;
import org.codehaus.aspectwerkz.joinpoint.JoinPoint;
import org.codehaus.aspectwerkz.joinpoint.MethodSignature;
import org.codehaus.aspectwerkz.definition.Pointcut;
import org.codehaus.aspectwerkz.definition.Pointcut;

/**
 * @author <a href="mailto:alex@gnilux.com">Alexandre Vasseur </a>
 * @author <a href="mailto:jboner@codehaus.org">Jonas Bonér </a>
 */
public class ArgAspect {

    private int m_level = 0;

    /**
     * @Around pc1(ai, as)
     */
    public Object around1(final JoinPoint joinPoint, int ai, String as) throws Throwable {
        indent();
        m_level++;
        System.out.println(" ==> around1 -- pre " + ai + ", " + as);
        Object result = joinPoint.proceed();
        m_level--;
        indent();
        System.out.println(" ==> around1 -- post " + ai + ", " + as);
        return result;
    }

    /**
     * @Before pc1(ai, as)
     */
    public void before1(final JoinPoint joinPoint, int ai, String as) throws Throwable {
        indent();
        m_level++;
        System.out.println(" ==> before1: " + ai + ", " + as);
    }

    /**
     * @After pc1(ai, as)
     */
    public void after1(final JoinPoint joinPoint, int ai, String as) throws Throwable {
        m_level--;
        indent();
        System.out.println(" ==> after1: " + ai + ", " + as);
    }

    /**
     * @Before pc1(ai, as)
     */
    public void before2(final JoinPoint joinPoint, String as, int ai) throws Throwable {
        indent();
        m_level++;
        System.out.println(" ==> before2: " + as + ", " + ai);
    }

    /**
     * @After pc1(ai, as)
     */
    public void after2(final JoinPoint joinPoint, String as, int ai) throws Throwable {
        m_level--;
        indent();
        System.out.println(" ==> after2: " + as + ", " + ai);
    }

    /**
     * @Around pc2(sarr)
     */
    public Object around3(final JoinPoint joinPoint, String[] sarr) throws Throwable {
        indent();
        m_level++;
        System.out.println("==> around3 -- pre " + sarr);
        Object result = joinPoint.proceed();
        m_level--;
        indent();
        System.out.println("==> around3 -- post " + sarr);
        return result;
    }

    /**
     * @Before pc2(sarr)
     */
    public void before3(final JoinPoint joinPoint, String[] sarr) throws Throwable {
        indent();
        m_level++;
        System.out.println("==> before3: " + sarr);
    }

    /**
     * @After pc2(sarr)
     */
    public void after3(final JoinPoint joinPoint, String[] sarr) throws Throwable {
        m_level--;
        indent();
        System.out.println("==> after3: " + sarr);
    }

    /**
     * @Around pcSet || pcGet
     */
    public Object aroundField(final JoinPoint joinPoint) throws Throwable {
        indent();
        m_level++;
        System.out.println("==> aroundField -- pre");
        Object result = joinPoint.proceed();
        m_level--;
        indent();
        System.out.println("==> aroundField -- post");
        return result;
    }

    /**
     * @Before pcSet || pcGet
     */
    public void beforeField(final JoinPoint joinPoint) throws Throwable {
        indent();
        m_level++;
        System.out.println("==> beforeField");
    }

    /**
     * @After pcSet || pcGet
     */
    public void after3(final JoinPoint joinPoint) throws Throwable {
        m_level--;
        indent();
        System.out.println("==> beforeField");
    }

    /**
     * @Expression execution(* ..ArgLoggingTarget.toLog*(..)) && args(int, s, i)
     */
    Pointcut pc1(int i, String s) {
        return null;
    }

    /**
     * @Expression execution(* ..ArgLoggingTarget.toLog*(..)) && args(int, sarr)
     */
    Pointcut pc2(String[] sarr) {
        return null;
    }

    /**
     * @Expression execution(* ..ArgLoggingTarget.toLog*(..))
     */
    Pointcut pc3() {
        return null;
    }

    /**
     * @Expression set(* ..ArgLoggingTarget.*)
     */
    Pointcut pcSet() {
        return null;
    }

    /**
     * @Expression get(* ..ArgLoggingTarget.*)
     */
    Pointcut pcGet() {
        return null;
    }

    private void indent() {
        for (int i = 0; i < m_level; i++) {
            System.out.print("  ");
        }
    }
}/**************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                 *
 * http://aspectwerkz.codehaus.org                                                    *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the LGPL license      *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/
package examples.logging;

import org.codehaus.aspectwerkz.joinpoint.StaticJoinPoint;

/**
 * This aspect shows how to implement logging modules using Log4j, 1.4 Logger etc.
 * (currently showing the use of 1.4 Logger API).
 *
 * @author <a href="mailto:jboner@codehaus.org">Jonas Bonér </a>
 */
public class LoggerIdiom {

    /**
     * @Around("methodToLog && target(loggable)")
     */
    public Object log(StaticJoinPoint jp, Loggable loggable) throws Throwable {
        loggable.getLog().log(Level.ALL, "entering " + jp.getSignature());
        Object result = jp.proceed();
        loggable.getLog().log(Level.ALL, "exiting " + jp.getSignature());
        return result;
    }

    /**
     * @Mixin(
     *      pointcut="loggableClasses",
     *      deploymentModel="perClass"
     * )
     */
    public static class LoggableImpl implements Loggable {

        private final Logger LOG;

        public LoggableImpl(Class targetClass) {
            LOG = Logger.getLogger(targetClass.getName());
        }

        public Logger getLog() {
            return LOG;
        }
    }

    public static interface Loggable {
        Logger getLog();
    }

    // some backport of Java 1.4 logging so that the sample can run on 1.3
    //TODO : else move to jdk15 samples
    static class Level {
        static final Level ALL = new Level();
    }
    static class Logger {
        private static Logger SINGLETON = new Logger();
        static Logger getLogger(String name) {
            return SINGLETON;
        }
        void log(Level level, String m) {
            System.out.println("examples.logging.Logger : " + m);
        }
    }
}

